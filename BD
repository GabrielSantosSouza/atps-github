-- Criando a tabela Sala
CREATE TABLE Sala (
    sala_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    numero_sala VARCHAR(10) NOT NULL UNIQUE,          -- Ex: 'B101', 'B215'
    andar INTEGER NOT NULL CHECK (andar IN (1, 2, 3)), -- Andar (1, 2, ou 3)
    capacidade_alunos INTEGER,                         -- Número máximo de alunos que a sala suporta
    tipo_sala INTEGER DEFAULT 1 NOT NULL
        CHECK (tipo_sala IN (1, 2, 3, 4, 5)),          -- Tipo da sala (1: Aula, 2: Laboratório, 3: Auditório, 4: Reunião, 5: Escritório)
    tem_projetor TINYINT(1) DEFAULT FALSE NOT NULL,    -- Tem projetor? (TRUE para Sim, FALSE para Não)
    tem_tv TINYINT(1) DEFAULT FALSE NOT NULL,          -- Tem TV? (TRUE para Sim, FALSE para Não)
    tem_quadro_interativo TINYINT(1) DEFAULT FALSE NOT NULL, -- Tem Quadro Interativo? (TRUE para Sim, FALSE para Não)
    quantidade_computadores INTEGER DEFAULT NULL,      -- Quantidade de computadores (NULL se não for laboratório)
    ativa CHAR(1) DEFAULT 'S' NOT NULL                 -- Indica se a sala está ativa ('S') ou não ('N') para reserva.
        CHECK (ativa IN ('S', 'N')),

    CONSTRAINT chk_computadores_por_tipo CHECK (
        (tipo_sala = 2 AND quantidade_computadores IS NOT NULL AND quantidade_computadores >= 0) -- 2 = Laboratório
        OR
        (tipo_sala != 2 AND quantidade_computadores IS NULL) -- Não é Laboratório
    )
);

-- Inserções em Sala (com a nova coluna 'ativa')
-- Andar 1
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B101', 1, 40, 1, FALSE, FALSE, FALSE, NULL, 'S'); -- tipo_sala = 1 (Aula)
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B102', 1, 40, 1, TRUE, FALSE, FALSE, NULL, 'S'); -- tipo_sala = 1 (Aula)
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B103', 1, 30, 2, TRUE, FALSE, FALSE, 15, 'S'); -- tipo_sala = 2 (Laboratório)
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B104', 1, 20, 4, FALSE, TRUE, FALSE, NULL, 'N'); -- tipo_sala = 4 (Reunião), Exemplo de sala inativa
-- ... (mais inserções, todas com a coluna 'ativa')
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B130', 1, 30, 2, TRUE, FALSE, TRUE, 20, 'S'); -- tipo_sala = 2 (Laboratório)

-- Andar 2
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B201', 2, 40, 1, TRUE, FALSE, FALSE, NULL, 'S'); -- tipo_sala = 1 (Aula)
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B202', 2, 40, 1, FALSE, FALSE, FALSE, NULL, 'S'); -- tipo_sala = 1 (Aula)
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B203', 2, 15, 5, FALSE, FALSE, FALSE, NULL, 'S'); -- tipo_sala = 5 (Escritório)
-- ...
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B230', 2, 30, 2, TRUE, TRUE, FALSE, 25, 'S'); -- tipo_sala = 2 (Laboratório)

-- Andar 3
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B301', 3, 40, 1, FALSE, FALSE, FALSE, NULL, 'S'); -- tipo_sala = 1 (Aula)
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B302', 3, 40, 1, TRUE, FALSE, FALSE, NULL, 'S'); -- tipo_sala = 1 (Aula)
-- ...
INSERT INTO Sala (numero_sala, andar, capacidade_alunos, tipo_sala, tem_projetor, tem_tv, tem_quadro_interativo, quantidade_computadores, ativa)
VALUES ('B330', 3, 100, 3, TRUE, TRUE, TRUE, NULL, 'S'); -- tipo_sala = 3 (Auditório)
COMMIT;


CREATE TABLE Curso (
    curso_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    nome_curso VARCHAR(100) NOT NULL UNIQUE,
    coordenador_id INTEGER -- Será atualizado após a tabela Professor ser populada
    -- A restrição de chave estrangeira será adicionada posteriormente
);

INSERT INTO Curso (nome_curso) VALUES ('Sistemas de Informação');
INSERT INTO Curso (nome_curso) VALUES ('Engenharia Civil');
-- Adicione mais cursos conforme necessário

CREATE TABLE Professor (
    professor_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    cpf VARCHAR(14) NOT NULL UNIQUE,    -- CPF do professor, único
    coordenador TINYINT(1) DEFAULT FALSE,
    curso_id INTEGER,
    FOREIGN KEY (curso_id) REFERENCES Curso(curso_id)
);

-- Inserindo professores com CPF
INSERT INTO Professor (nome, email, cpf, coordenador, curso_id) VALUES ('Alan Turing', 'alan.turing@university.com', '111.111.111-11', FALSE, (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Professor (nome, email, cpf, coordenador, curso_id) VALUES ('Ada Lovelace', 'ada.lovelace@university.com', '222.222.222-22', FALSE, (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Professor (nome, email, cpf, coordenador, curso_id) VALUES ('Grace Hopper', 'grace.hopper@university.com', '333.333.333-33', TRUE, (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Professor (nome, email, cpf, coordenador, curso_id) VALUES ('Marie Curie', 'marie.curie@university.com', '444.444.444-44', FALSE, (SELECT curso_id FROM Curso WHERE nome_curso = 'Engenharia Civil'));

-- Atualizar Curso com o ID do Coordenador
UPDATE Curso
SET coordenador_id = (SELECT professor_id FROM Professor WHERE email = 'grace.hopper@university.com')
WHERE nome_curso = 'Sistemas de Informação';
-- Adicionar mais atualizações de coordenador para outros cursos, se aplicável

-- Adicionar restrição de chave estrangeira à tabela Curso agora que Professor está populada
ALTER TABLE Curso ADD FOREIGN KEY (coordenador_id) REFERENCES Professor(professor_id);

CREATE TABLE Aluno (
    aluno_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    cpf VARCHAR(14) NOT NULL UNIQUE,    -- CPF do aluno, único
    matricula VARCHAR(20) UNIQUE,
    curso_id INTEGER NOT NULL,
    FOREIGN KEY (curso_id) REFERENCES Curso(curso_id)
);

-- Inserindo alunos com CPF
INSERT INTO Aluno (nome, email, cpf, matricula, curso_id) VALUES ('Maria Silva', 'maria.silva@email.com', '555.555.555-55', '2025001', (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Aluno (nome, email, cpf, matricula, curso_id) VALUES ('João Pereira', 'joao.pereira@email.com', '666.666.666-66', '2025002', (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Aluno (nome, email, cpf, matricula, curso_id) VALUES ('Carlos Andrade', 'carlos.andrade@email.com', '777.777.777-77', '2025003', (SELECT curso_id FROM Curso WHERE nome_curso = 'Engenharia Civil'));


CREATE TABLE Usuario (
    usuario_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(100) NOT NULL UNIQUE, -- Usado para identificação no login
    cpf VARCHAR(14) NOT NULL UNIQUE,    -- CPF único para todos os usuários, usável para login
    senha_hash VARCHAR(255) NOT NULL,   -- Armazenar senhas com hash!
    tipo_usuario INTEGER NOT NULL
        CHECK (tipo_usuario IN (1, 2, 3)), -- 1: Professor, 2: Aluno, 3: Outro (ex: Administrativo)
    referencia_id INTEGER NULL,         -- professor_id, aluno_id ou NULL para 'Outro'
    ativo TINYINT(1) DEFAULT TRUE NOT NULL -- Indica se o usuário está ativo
);

-- Inserções em Usuario (senha_hash é um exemplo, use hashes reais)
-- Professores
INSERT INTO Usuario (email, cpf, senha_hash, tipo_usuario, referencia_id, ativo)
VALUES (
    'alan.turing@university.com',
    '111.111.111-11',
    'hash_da_senha_alan', -- Substituir por um hash real
    1, -- tipo_usuario = 1 (Professor)
    (SELECT professor_id FROM Professor WHERE email = 'alan.turing@university.com'),
    TRUE
);
INSERT INTO Usuario (email, cpf, senha_hash, tipo_usuario, referencia_id, ativo)
VALUES (
    'grace.hopper@university.com',
    '333.333.333-33',
    'hash_da_senha_grace', -- Substituir por um hash real
    1, -- tipo_usuario = 1 (Professor)
    (SELECT professor_id FROM Professor WHERE email = 'grace.hopper@university.com'),
    TRUE
);

-- Alunos
INSERT INTO Usuario (email, cpf, senha_hash, tipo_usuario, referencia_id, ativo)
VALUES (
    'maria.silva@email.com',
    '555.555.555-55',
    'hash_da_senha_maria', -- Substituir por um hash real
    2, -- tipo_usuario = 2 (Aluno)
    (SELECT aluno_id FROM Aluno WHERE email = 'maria.silva@email.com'),
    TRUE
);
INSERT INTO Usuario (email, cpf, senha_hash, tipo_usuario, referencia_id, ativo)
VALUES (
    'joao.pereira@email.com',
    '666.666.666-66',
    'hash_da_senha_joao', -- Substituir por um hash real
    2, -- tipo_usuario = 2 (Aluno)
    (SELECT aluno_id FROM Aluno WHERE email = 'joao.pereira@email.com'),
    FALSE -- Exemplo de usuário inativo
);

-- Outro tipo de usuário (ex: Administrativo)
INSERT INTO Usuario (email, cpf, senha_hash, tipo_usuario, referencia_id, ativo)
VALUES (
    'admin@university.com',
    '000.000.000-00',
    'hash_da_senha_admin', -- Substituir por um hash real
    3, -- tipo_usuario = 3 (Outro)
    NULL, -- Sem referencia_id para tabelas Aluno/Professor
    TRUE
);
COMMIT;


CREATE TABLE Disciplina (
    disciplina_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    nome_disciplina VARCHAR(100) NOT NULL,
    codigo_disciplina VARCHAR(10) UNIQUE,
    curso_id INTEGER NOT NULL,
    FOREIGN KEY (curso_id) REFERENCES Curso(curso_id)
);

-- Disciplinas para Sistemas de Informação
INSERT INTO Disciplina (nome_disciplina, codigo_disciplina, curso_id) VALUES ('Banco de Dados', 'SI101', (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Disciplina (nome_disciplina, codigo_disciplina, curso_id) VALUES ('Programação Orientada a Objetos', 'SI102', (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Disciplina (nome_disciplina, codigo_disciplina, curso_id) VALUES ('Engenharia de Software', 'SI201', (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
INSERT INTO Disciplina (nome_disciplina, codigo_disciplina, curso_id) VALUES ('Redes de Computadores', 'SI202', (SELECT curso_id FROM Curso WHERE nome_curso = 'Sistemas de Informação'));
-- Disciplinas para Engenharia Civil
INSERT INTO Disciplina (nome_disciplina, codigo_disciplina, curso_id) VALUES ('Cálculo I', 'EC101', (SELECT curso_id FROM Curso WHERE nome_curso = 'Engenharia Civil'));
INSERT INTO Disciplina (nome_disciplina, codigo_disciplina, curso_id) VALUES ('Resistência dos Materiais', 'EC201', (SELECT curso_id FROM Curso WHERE nome_curso = 'Engenharia Civil'));
COMMIT;


CREATE TABLE Horario_Aula (
    horario_id INTEGER PRIMARY KEY AUTO_INCREMENT,
    sala_id INTEGER NOT NULL,
    professor_id INTEGER NOT NULL,
    disciplina_id INTEGER NOT NULL,
    dia_semana VARCHAR(15) NOT NULL CHECK (dia_semana IN ('Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado')),
    hora_inicio TIME NOT NULL,
    hora_fim TIME NOT NULL,
    UNIQUE (sala_id, dia_semana, hora_inicio),
    UNIQUE (professor_id, dia_semana, hora_inicio),
    FOREIGN KEY (sala_id) REFERENCES Sala(sala_id),
    FOREIGN KEY (professor_id) REFERENCES Professor(professor_id),
    FOREIGN KEY (disciplina_id) REFERENCES Disciplina(disciplina_id)
);

-- Inserções em Horario_Aula (usando subqueries para IDs)
INSERT INTO Horario_Aula (sala_id, professor_id, disciplina_id, dia_semana, hora_inicio, hora_fim)
VALUES (
    (SELECT sala_id FROM Sala WHERE numero_sala = 'B101'),
    (SELECT professor_id FROM Professor WHERE email = 'alan.turing@university.com'),
    (SELECT disciplina_id FROM Disciplina WHERE codigo_disciplina = 'SI101'),
    'Segunda-feira', '07:00:00', '08:40:00'
);
INSERT INTO Horario_Aula (sala_id, professor_id, disciplina_id, dia_semana, hora_inicio, hora_fim)
VALUES (
    (SELECT sala_id FROM Sala WHERE numero_sala = 'B102'),
    (SELECT professor_id FROM Professor WHERE email = 'ada.lovelace@university.com'),
    (SELECT disciplina_id FROM Disciplina WHERE codigo_disciplina = 'SI102'),
    'Segunda-feira', '07:00:00', '08:40:00'
);
INSERT INTO Horario_Aula (sala_id, professor_id, disciplina_id, dia_semana, hora_inicio, hora_fim)
VALUES (
    (SELECT sala_id FROM Sala WHERE numero_sala = 'B201'),
    (SELECT professor_id FROM Professor WHERE email = 'grace.hopper@university.com'),
    (SELECT disciplina_id FROM Disciplina WHERE codigo_disciplina = 'SI201'),
    'Terça-feira', '09:00:00', '10:40:00'
);
COMMIT;


CREATE TABLE Aluno_Disciplina (
    inscricao_id INTEGER PRIMARY KEY AUTO_INCREMENT, -- SQLite usa AUTOINCREMENT, MySQL usa AUTO_INCREMENT na definição da coluna
    aluno_id INTEGER NOT NULL,
    disciplina_id INTEGER NOT NULL,
    UNIQUE (aluno_id, disciplina_id),
    FOREIGN KEY (aluno_id) REFERENCES Aluno(aluno_id),
    FOREIGN KEY (disciplina_id) REFERENCES Disciplina(disciplina_id)
);

-- Inscrições de Alunos em Disciplinas
-- Maria Silva em Banco de Dados e Engenharia de Software
INSERT INTO Aluno_Disciplina (aluno_id, disciplina_id) VALUES (
    (SELECT aluno_id FROM Aluno WHERE email = 'maria.silva@email.com'),
    (SELECT disciplina_id FROM Disciplina WHERE codigo_disciplina = 'SI101')
);
INSERT INTO Aluno_Disciplina (aluno_id, disciplina_id) VALUES (
    (SELECT aluno_id FROM Aluno WHERE email = 'maria.silva@email.com'),
    (SELECT disciplina_id FROM Disciplina WHERE codigo_disciplina = 'SI201')
);
-- João Pereira em Banco de Dados e POO (se ele estiver ativo)
-- Considerando que João Pereira (joao.pereira@email.com) está inativo na tabela Usuario,
-- a lógica da aplicação pode impedir novas inscrições, mas o BD permitiria se o aluno_id existir.
-- Para este exemplo, vamos assumir que a inscrição foi feita quando ele estava ativo.
INSERT INTO Aluno_Disciplina (aluno_id, disciplina_id) VALUES (
    (SELECT aluno_id FROM Aluno WHERE email = 'joao.pereira@email.com'),
    (SELECT disciplina_id FROM Disciplina WHERE codigo_disciplina = 'SI101')
);
INSERT INTO Aluno_Disciplina (aluno_id, disciplina_id) VALUES (
    (SELECT aluno_id FROM Aluno WHERE email = 'joao.pereira@email.com'),
    (SELECT disciplina_id FROM Disciplina WHERE codigo_disciplina = 'SI102')
);
COMMIT;
